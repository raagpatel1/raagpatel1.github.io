plot(milk_cost, type = "o", col = "red",
main = "Milk Production Cost/Profit ($/CWT)", ylim = c(0,30))
lines(milk_profit,type = "o", col = "green")
## Time Series
ts_milk_cost = ts(milk_cost$Value,start = 2000, end = 2020)
ts_milk_profit = ts(milk_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_milk_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
holt_profit = holt(ts_milk_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
## Graphically
plot(ts_milk_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Milk Production Cost/Profit ($/CWT)",
xlim = c(2000, 2026),ylim = c(0,30), col = "red")
lines(ts_milk_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
install.packages('aTSA')
library(aTSA)
milk_cost = MilkCostReturn %>% filter(ItemId == 840) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
milk_profit = MilkCostReturn %>% filter(ItemId == 380) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
plot(milk_cost, type = "o", col = "red",
main = "Milk Production Cost/Profit ($/CWT)", ylim = c(0,30))
lines(milk_profit,type = "o", col = "green")
## Time Series
ts_milk_cost = ts(milk_cost$Value,start = 2000, end = 2020)
ts_milk_profit = ts(milk_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_milk_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
holt_profit = holt(ts_milk_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
## Graphically
plot(ts_milk_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Milk Production Cost/Profit ($/CWT)",
xlim = c(2000, 2026),ylim = c(0,30), col = "red")
lines(ts_milk_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
setwd("D:/School/DS6306/Live Session Assignments")
library(readxl)
library(dplyr)
library(ggplot2)
library(xts)
library(aTSA)
################################# READING IN DATA
RiceCostReturn <- read_excel("Week 11/DSNotW/RiceCostReturn.xlsx",
sheet = "Data Sheet (machine readable)",
col_types = c("text", "numeric", "text",
"numeric", "text", "text", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "skip", "numeric",
"text", "numeric"))
CornCostReturn <- read_excel("Week 11/DSNotW/CornCostReturn.xlsx",
sheet = "Data Sheet (machine readable)",
col_types = c("text", "numeric", "text",
"numeric", "text", "text", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "skip", "numeric",
"text", "numeric"))
MilkCostReturn <- read_excel("Week 11/DSNotW/MilkCostReturn.xlsx",
sheet = "Data sheet (machine readable)",
col_types = c("text", "numeric", "text",
"numeric", "text", "text", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "skip", "numeric",
"text", "numeric"))
##################################################### Change in Milk cost
milk_cost = MilkCostReturn %>% filter(ItemId == 840) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
milk_profit = MilkCostReturn %>% filter(ItemId == 380) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
plot(milk_cost, type = "o", col = "red",
main = "Milk Production Cost/Profit ($/CWT)", ylim = c(0,30))
lines(milk_profit,type = "o", col = "green")
## Time Series
ts_milk_cost = ts(milk_cost$Value,start = 2000, end = 2020)
ts_milk_profit = ts(milk_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_milk_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
holt_profit = holt(ts_milk_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
## Graphically
plot(ts_milk_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Milk Production Cost/Profit ($/CWT)",
xlim = c(2000, 2026),ylim = c(0,30), col = "red")
lines(ts_milk_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
library(readxl)
library(dplyr)
library(ggplot2)
library(xts)
library(aTSA)
library(fpp)
library(fpp2)
milk_cost = MilkCostReturn %>% filter(ItemId == 840) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
milk_profit = MilkCostReturn %>% filter(ItemId == 380) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
plot(milk_cost, type = "o", col = "red",
main = "Milk Production Cost/Profit ($/CWT)", ylim = c(0,30))
lines(milk_profit,type = "o", col = "green")
## Time Series
ts_milk_cost = ts(milk_cost$Value,start = 2000, end = 2020)
ts_milk_profit = ts(milk_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_milk_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
holt_profit = holt(ts_milk_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 11)
## Graphically
plot(ts_milk_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Milk Production Cost/Profit ($/CWT)",
xlim = c(2000, 2026),ylim = c(0,30), col = "red")
lines(ts_milk_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
gc()
setwd("D:/School/DS6306/Live Session Assignments")
library(readxl)
library(dplyr)
library(ggplot2)
library(xts)
library(aTSA)
library(fpp)
library(fpp2)
################################# READING IN DATA
RiceCostReturn <- read_excel("Week 11/DSNotW/RiceCostReturn.xlsx",
sheet = "Data Sheet (machine readable)",
col_types = c("text", "numeric", "text",
"numeric", "text", "text", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "skip", "numeric",
"text", "numeric"))
CornCostReturn <- read_excel("Week 11/DSNotW/CornCostReturn.xlsx",
sheet = "Data Sheet (machine readable)",
col_types = c("text", "numeric", "text",
"numeric", "text", "text", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "skip", "numeric",
"text", "numeric"))
MilkCostReturn <- read_excel("Week 11/DSNotW/MilkCostReturn.xlsx",
sheet = "Data sheet (machine readable)",
col_types = c("text", "numeric", "text",
"numeric", "text", "text", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "skip", "numeric",
"text", "numeric"))
##################################################### Change in Milk cost
milk_cost = MilkCostReturn %>% filter(ItemId == 840) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
milk_profit = MilkCostReturn %>% filter(ItemId == 380) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
plot(milk_cost, type = "o", col = "red",
main = "Milk Production Cost/Profit ($/CWT)", ylim = c(0,30))
lines(milk_profit,type = "o", col = "green")
## Time Series
ts_milk_cost = ts(milk_cost$Value,start = 2000, end = 2020)
ts_milk_profit = ts(milk_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_milk_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 5)
holt_profit = holt(ts_milk_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 5)
## Graphically
plot(ts_milk_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Milk Production Cost/Profit ($/CWT)",
xlim = c(2000, 2026),ylim = c(0,30), col = "red")
lines(ts_milk_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
##################################################### Change in rice cost
rice_cost = RiceCostReturn %>% filter(ItemId == 840) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
rice_profit = RiceCostReturn %>% filter(ItemId == 380) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
plot(rice_cost, type = "o", col = "red",
main = "Rice Production Cost/Profit ($/acre)", ylim = c(0,1500))
lines(rice_profit,type = "o", col = "green")
## Time Series
ts_rice_cost = ts(rice_cost$Value,start = 2000, end = 2020)
ts_rice_profit = ts(rice_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_rice_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 5)
holt_profit = holt(ts_rice_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 5)
## Graphically
plot(ts_rice_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Rice Production Cost/Profit ($/acre)",
xlim = c(2000, 2026),ylim = c(0,1500), col = "red")
lines(ts_rice_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
##################################################### Change in Corn cost
corn_cost = CornCostReturn %>% filter(ItemId == 840) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
corn_profit = CornCostReturn %>% filter(ItemId == 380) %>%
filter(Region == "U.S. total") %>%
select(Year,Value)
plot(corn_cost, type = "o", col = "red",
main = "Corn Production Cost/Profit ($/acre)", ylim = c(0,1000))
lines(corn_profit,type = "o", col = "green")
## Time Series
ts_corn_cost = ts(corn_cost$Value,start = 2000, end = 2020)
ts_corn_profit = ts(corn_profit$Value,start = 2000, end = 2020)
## Holt's
holt_cost = holt(ts_corn_cost, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 5)
holt_profit = holt(ts_corn_profit, alpha = .8, beta = .2, damped = TRUE,
initial = "optimal", exponential = T, h = 5)
## Graphically
plot(ts_corn_cost, xlab = "Year", ylab = "Value", type = "o",
main = "Corn Production Cost/Profit ($/acre)",
xlim = c(2000, 2026),ylim = c(0,1000), col = "red")
lines(ts_corn_profit, type = "o", col = "green")
lines(holt_profit$mean,col = "green", type = "o")
lines(holt_cost$mean, col = "red", type = "o")
# END
setwd("D:\School\GitHub\raagpatel1.github.io")
getwed()
getwd()
setwd("D:/School/GitHub/raagpatel1.github.io")
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(GGally)
library(cowplot)
library(ggpubr)
library(devtools)
library(ggcorrplot)
library(ggfittext)
library(class)
library(caret)
library(e1071)
library(usmap)
############################## INTRODUCTION ####################################
#
# This R markdown file will answer the 9 questions "asked" by the"Budweiser CEO
# and CFO using the provided Beer and Breweries data sets.  We will first import
# and summarize the data to check for any apparent anomalies before organizing
# with the use of tidyverse. From there we will address each question broken up
# into Parts 1 - 9, each with step by step comments and a final conclusion.
#
############################## INTRODUCTION ####################################
## Read in the .csv's
Beer =
read_csv("MSDS_6306_Doing-Data-Science/Unit 8 and 9 Case Study 1/Beers.csv")
Brewery =
read_csv("MSDS_6306_Doing-Data-Science/Unit 8 and 9 Case Study 1/Breweries.csv")
Beer =
read_csv("MSDS_6306_Doing-Data-Science/Unit 8 and 9 Case Study 1/Beers.csv")
Brewery =
read_csv("MSDS_6306_Doing-Data-Science/Unit 8 and 9 Case Study 1/Breweries.csv")
setwd("D:/School/DS6306/Live Session Assignments")
Beer =
read_csv("MSDS_6306_Doing-Data-Science/Unit 8 and 9 Case Study 1/Beers.csv")
Brewery =
read_csv("MSDS_6306_Doing-Data-Science/Unit 8 and 9 Case Study 1/Breweries.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(GGally)
library(cowplot)
library(ggpubr)
library(devtools)
library(ggcorrplot)
library(ggfittext)
library(class)
library(caret)
library(e1071)
library(usmap)
############################## INTRODUCTION ####################################
#
# This R markdown file will answer the 9 questions "asked" by the"Budweiser CEO
# and CFO using the provided Beer and Breweries data sets.  We will first import
# and summarize the data to check for any apparent anomalies before organizing
# with the use of tidyverse. From there we will address each question broken up
# into Parts 1 - 9, each with step by step comments and a final conclusion.
#
############################## INTRODUCTION ####################################
## Read in the .csv's
Beer =
read.csv(file.choose(),header = TRUE)
Brewery =
read.csv(file.choose(),header = TRUE)
setwd("D:/School/GitHub/raagpatel1.github.io")
library("rmarkdown")
install.packages(("rmarkdown"))
install.packages(("rmarkdown"))
library("rmarkdown")
render_site()
setwd("D:/School/GitHub/raagpatel1.github.io")
library("rmarkdown")
render_site()
render_site()
render_site()
install.packages("shiny")
library(shiny)
install.packages("rsconnect")
library(rsconnect)\
library(rsconnect)
rsconnect::setAccountInfo(name='raagpatel1',
token='80ADA9933EE7D27125672588AF37FA1D',
secret='oOKfSU5tjbnTak98vpaVmmzkIVValYCWKUbHPoO7')
rsconnect::setAccountInfo(name='raagpatel1',token='80ADA9933EE7D27125672588AF37FA1D', secret = 'oOKfSU5tjbnTak98vpaVmmzkIVValYCWKUbHPoO7')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='raagpatel1',
token='80ADA9933EE7D27125672588AF37FA1D',
secret='oOKfSU5tjbnTak98vpaVmmzkIVValYCWKUbHPoO7')
shiny::runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('~/InteractiveBeers')
runApp('InteractiveBeers')
library(readr)
Beers <- read_csv("Beers.csv")
View(Beers)
runApp('InteractiveBeers')
runApp('InteractiveBeers')
runApp('InteractiveBeers')
runApp('InteractiveBeers')
runApp('InteractiveBeers')
runApp('InteractiveBeers')
runApp('InteractiveBeers')
runApp()
runApp()
library(shiny)
library(dplyr)
library(ggplot2)
library(shiny)
library(dplyr)
library(ggplot2)
myFun <- function(x){
x = x %>% drop_na()
return(x)
}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(dplyr)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Interactive Graphs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Input files
fileInput("file", label = h3("Locate Beers.csv")),
fileInput("Brewery", label = h3("Locate Breweries.csv")),
# Choose IBU graph type
radioButtons("ibu", label = h3("IBU Graph Type"),
choices = list("Histogram" = 1, "Boxplot" = 2),
selected = 0),
# Choose ABV graph type
radioButtons("abv", label = h3("ABV Graph Type"),
choices = list("Histogram" = 1, "Boxplot" = 2),
selected = 0),
# Scatterplot SLR
actionButton("slr", label = "Show Simple Linear Regression Line?")
),
# Show Plots
mainPanel(
plotOutput("IBU"),
plotOutput("ABV"),
plotOutput("Scatter")
)
)
)
myFun <- function(x){
x = x %>% drop_na()
return(x)
}
# Define server logic required to draw a histogram
server <- function(input, output) {
observe({
Beer <- input$file
x <- myFun(Beer)
})
output$IBU <- renderPlot({
if(input$ibu == 1){
hist(x[,4], col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
}
if(input$ibu == 2)
{
hist(x[,4],col = "#75AADB", border = "white",
xlab = "Eruption time (in mins)",
main = "Histogram of eruption times")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(tidyverse)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(dplyr)
library(ggplot2)
library(tidyverse)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Interactive Graphs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Input files
fileInput("file", label = h3("Locate Beers.csv")),
fileInput("Brewery", label = h3("Locate Breweries.csv")),
# Choose IBU graph type
radioButtons("ibu", label = h3("IBU Graph Type"),
choices = list("Histogram" = 1, "Boxplot" = 2),
selected = 0),
# Choose ABV graph type
radioButtons("abv", label = h3("ABV Graph Type"),
choices = list("Histogram" = 1, "Boxplot" = 2),
selected = 0),
# Scatterplot SLR
actionButton("slr", label = "Show Simple Linear Regression Line?")
),
# Show Plots
mainPanel(
plotOutput("IBU"),
plotOutput("ABV"),
plotOutput("Scatter")
)
)
)
myFun <- function(x){
x = x %>% drop_na()
return(x)
}
# Define server logic required to draw a histogram
server <- function(input, output) {
observe({
Beer <- input$file
x <- myFun(Beer)
})
output$IBU <- renderPlot({
if(input$ibu == 1){
hist(x[,4], col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
}
if(input$ibu == 2)
{
hist(x[,4],col = "#75AADB", border = "white",
xlab = "Eruption time (in mins)",
main = "Histogram of eruption times")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('InteractiveBeers')
